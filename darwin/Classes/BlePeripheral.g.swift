// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Enums
enum BondState: Int {
  case bonding = 0
  case bonded = 1
  case none = 2
}

/// Models
///
/// Generated class from Pigeon that represents data sent in messages.
struct BleService {
  var uuid: String
  var primary: Bool
  var characteristics: [BleCharacteristic]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BleService? {
    let uuid = pigeonVar_list[0] as! String
    let primary = pigeonVar_list[1] as! Bool
    let characteristics = pigeonVar_list[2] as! [BleCharacteristic]

    return BleService(
      uuid: uuid,
      primary: primary,
      characteristics: characteristics
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      primary,
      characteristics,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleCharacteristic {
  var uuid: String
  var properties: [Int64]
  var permissions: [Int64]
  var descriptors: [BleDescriptor]? = nil
  var value: FlutterStandardTypedData? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BleCharacteristic? {
    let uuid = pigeonVar_list[0] as! String
    let properties = pigeonVar_list[1] as! [Int64]
    let permissions = pigeonVar_list[2] as! [Int64]
    let descriptors: [BleDescriptor]? = nilOrValue(pigeonVar_list[3])
    let value: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[4])

    return BleCharacteristic(
      uuid: uuid,
      properties: properties,
      permissions: permissions,
      descriptors: descriptors,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      properties,
      permissions,
      descriptors,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleDescriptor {
  var uuid: String
  var value: FlutterStandardTypedData? = nil
  var permissions: [Int64]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BleDescriptor? {
    let uuid = pigeonVar_list[0] as! String
    let value: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[1])
    let permissions: [Int64]? = nilOrValue(pigeonVar_list[2])

    return BleDescriptor(
      uuid: uuid,
      value: value,
      permissions: permissions
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      value,
      permissions,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReadRequestResult {
  var value: FlutterStandardTypedData
  var offset: Int64? = nil
  var status: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReadRequestResult? {
    let value = pigeonVar_list[0] as! FlutterStandardTypedData
    let offset: Int64? = nilOrValue(pigeonVar_list[1])
    let status: Int64? = nilOrValue(pigeonVar_list[2])

    return ReadRequestResult(
      value: value,
      offset: offset,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      value,
      offset,
      status,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct WriteRequestResult {
  var value: FlutterStandardTypedData? = nil
  var offset: Int64? = nil
  var status: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> WriteRequestResult? {
    let value: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[0])
    let offset: Int64? = nilOrValue(pigeonVar_list[1])
    let status: Int64? = nilOrValue(pigeonVar_list[2])

    return WriteRequestResult(
      value: value,
      offset: offset,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      value,
      offset,
      status,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ManufacturerData {
  var manufacturerId: Int64
  var data: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ManufacturerData? {
    let manufacturerId = pigeonVar_list[0] as! Int64
    let data = pigeonVar_list[1] as! FlutterStandardTypedData

    return ManufacturerData(
      manufacturerId: manufacturerId,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      manufacturerId,
      data,
    ]
  }
}

private class BlePeripheralPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return BondState(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return BleService.fromList(self.readValue() as! [Any?])
    case 131:
      return BleCharacteristic.fromList(self.readValue() as! [Any?])
    case 132:
      return BleDescriptor.fromList(self.readValue() as! [Any?])
    case 133:
      return ReadRequestResult.fromList(self.readValue() as! [Any?])
    case 134:
      return WriteRequestResult.fromList(self.readValue() as! [Any?])
    case 135:
      return ManufacturerData.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class BlePeripheralPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BondState {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? BleService {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? BleCharacteristic {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? BleDescriptor {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ReadRequestResult {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? WriteRequestResult {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? ManufacturerData {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BlePeripheralPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BlePeripheralPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BlePeripheralPigeonCodecWriter(data: data)
  }
}

class BlePeripheralPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = BlePeripheralPigeonCodec(readerWriter: BlePeripheralPigeonCodecReaderWriter())
}

/// Flutter -> Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BlePeripheralChannel {
  func initialize() throws
  func isAdvertising() throws -> Bool?
  func isSupported() throws -> Bool
  func stopAdvertising() throws
  func askBlePermission() throws -> Bool
  func addService(service: BleService) throws
  func removeService(serviceId: String) throws
  func clearServices() throws
  func getServices() throws -> [String]
  func startAdvertising(services: [String], localName: String?, timeout: Int64?, manufacturerData: ManufacturerData?, addManufacturerDataInScanResponse: Bool) throws
  func updateCharacteristic(characteristicId: String, value: FlutterStandardTypedData, deviceId: String?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BlePeripheralChannelSetup {
  static var codec: FlutterStandardMessageCodec { BlePeripheralPigeonCodec.shared }
  /// Sets up an instance of `BlePeripheralChannel` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BlePeripheralChannel?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        do {
          try api.initialize()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let isAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isAdvertising\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isAdvertisingChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isAdvertising()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isAdvertisingChannel.setMessageHandler(nil)
    }
    let isSupportedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isSupported\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isSupportedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isSupported()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isSupportedChannel.setMessageHandler(nil)
    }
    let stopAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.stopAdvertising\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopAdvertisingChannel.setMessageHandler { _, reply in
        do {
          try api.stopAdvertising()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopAdvertisingChannel.setMessageHandler(nil)
    }
    let askBlePermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.askBlePermission\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      askBlePermissionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.askBlePermission()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      askBlePermissionChannel.setMessageHandler(nil)
    }
    let addServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.addService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addServiceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceArg = args[0] as! BleService
        do {
          try api.addService(service: serviceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addServiceChannel.setMessageHandler(nil)
    }
    let removeServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.removeService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeServiceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceIdArg = args[0] as! String
        do {
          try api.removeService(serviceId: serviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeServiceChannel.setMessageHandler(nil)
    }
    let clearServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.clearServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearServicesChannel.setMessageHandler { _, reply in
        do {
          try api.clearServices()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearServicesChannel.setMessageHandler(nil)
    }
    let getServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.getServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getServicesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getServices()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getServicesChannel.setMessageHandler(nil)
    }
    let startAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.startAdvertising\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startAdvertisingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let servicesArg = args[0] as! [String]
        let localNameArg: String? = nilOrValue(args[1])
        let timeoutArg: Int64? = nilOrValue(args[2])
        let manufacturerDataArg: ManufacturerData? = nilOrValue(args[3])
        let addManufacturerDataInScanResponseArg = args[4] as! Bool
        do {
          try api.startAdvertising(services: servicesArg, localName: localNameArg, timeout: timeoutArg, manufacturerData: manufacturerDataArg, addManufacturerDataInScanResponse: addManufacturerDataInScanResponseArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startAdvertisingChannel.setMessageHandler(nil)
    }
    let updateCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.updateCharacteristic\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateCharacteristicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let characteristicIdArg = args[0] as! String
        let valueArg = args[1] as! FlutterStandardTypedData
        let deviceIdArg: String? = nilOrValue(args[2])
        do {
          try api.updateCharacteristic(characteristicId: characteristicIdArg, value: valueArg, deviceId: deviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateCharacteristicChannel.setMessageHandler(nil)
    }
  }
}
/// Native -> Flutter
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol BleCallbackProtocol {
  func onReadRequest(deviceId deviceIdArg: String, characteristicId characteristicIdArg: String, offset offsetArg: Int64, value valueArg: FlutterStandardTypedData?, completion: @escaping (Result<ReadRequestResult?, PigeonError>) -> Void)
  func onWriteRequest(deviceId deviceIdArg: String, characteristicId characteristicIdArg: String, offset offsetArg: Int64, value valueArg: FlutterStandardTypedData?, completion: @escaping (Result<WriteRequestResult?, PigeonError>) -> Void)
  func onCharacteristicSubscriptionChange(deviceId deviceIdArg: String, characteristicId characteristicIdArg: String, isSubscribed isSubscribedArg: Bool, name nameArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onAdvertisingStatusUpdate(advertising advertisingArg: Bool, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onBleStateChange(state stateArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onServiceAdded(serviceId serviceIdArg: String, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onMtuChange(deviceId deviceIdArg: String, mtu mtuArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onConnectionStateChange(deviceId deviceIdArg: String, connected connectedArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onBondStateChange(deviceId deviceIdArg: String, bondState bondStateArg: BondState, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class BleCallback: BleCallbackProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: BlePeripheralPigeonCodec {
    return BlePeripheralPigeonCodec.shared
  }
  func onReadRequest(deviceId deviceIdArg: String, characteristicId characteristicIdArg: String, offset offsetArg: Int64, value valueArg: FlutterStandardTypedData?, completion: @escaping (Result<ReadRequestResult?, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceIdArg, characteristicIdArg, offsetArg, valueArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: ReadRequestResult? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  func onWriteRequest(deviceId deviceIdArg: String, characteristicId characteristicIdArg: String, offset offsetArg: Int64, value valueArg: FlutterStandardTypedData?, completion: @escaping (Result<WriteRequestResult?, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceIdArg, characteristicIdArg, offsetArg, valueArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: WriteRequestResult? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  func onCharacteristicSubscriptionChange(deviceId deviceIdArg: String, characteristicId characteristicIdArg: String, isSubscribed isSubscribedArg: Bool, name nameArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceIdArg, characteristicIdArg, isSubscribedArg, nameArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAdvertisingStatusUpdate(advertising advertisingArg: Bool, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStatusUpdate\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([advertisingArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onBleStateChange(state stateArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onServiceAdded(serviceId serviceIdArg: String, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([serviceIdArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMtuChange(deviceId deviceIdArg: String, mtu mtuArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onMtuChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceIdArg, mtuArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onConnectionStateChange(deviceId deviceIdArg: String, connected connectedArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceIdArg, connectedArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onBondStateChange(deviceId deviceIdArg: String, bondState bondStateArg: BondState, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceIdArg, bondStateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
