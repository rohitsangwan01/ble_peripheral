// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "BlePeripheral.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace ble_peripheral {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// BleService

BleService::BleService(
  const std::string& uuid,
  bool primary,
  const EncodableList& characteristics)
 : uuid_(uuid),
    primary_(primary),
    characteristics_(characteristics) {}

const std::string& BleService::uuid() const {
  return uuid_;
}

void BleService::set_uuid(std::string_view value_arg) {
  uuid_ = value_arg;
}


bool BleService::primary() const {
  return primary_;
}

void BleService::set_primary(bool value_arg) {
  primary_ = value_arg;
}


const EncodableList& BleService::characteristics() const {
  return characteristics_;
}

void BleService::set_characteristics(const EncodableList& value_arg) {
  characteristics_ = value_arg;
}


EncodableList BleService::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(uuid_));
  list.push_back(EncodableValue(primary_));
  list.push_back(EncodableValue(characteristics_));
  return list;
}

BleService BleService::FromEncodableList(const EncodableList& list) {
  BleService decoded(
    std::get<std::string>(list[0]),
    std::get<bool>(list[1]),
    std::get<EncodableList>(list[2]));
  return decoded;
}

// BleCharacteristic

BleCharacteristic::BleCharacteristic(
  const std::string& uuid,
  const EncodableList& properties,
  const EncodableList& permissions)
 : uuid_(uuid),
    properties_(properties),
    permissions_(permissions) {}

BleCharacteristic::BleCharacteristic(
  const std::string& uuid,
  const EncodableList& properties,
  const EncodableList& permissions,
  const EncodableList* descriptors,
  const std::vector<uint8_t>* value)
 : uuid_(uuid),
    properties_(properties),
    permissions_(permissions),
    descriptors_(descriptors ? std::optional<EncodableList>(*descriptors) : std::nullopt),
    value_(value ? std::optional<std::vector<uint8_t>>(*value) : std::nullopt) {}

const std::string& BleCharacteristic::uuid() const {
  return uuid_;
}

void BleCharacteristic::set_uuid(std::string_view value_arg) {
  uuid_ = value_arg;
}


const EncodableList& BleCharacteristic::properties() const {
  return properties_;
}

void BleCharacteristic::set_properties(const EncodableList& value_arg) {
  properties_ = value_arg;
}


const EncodableList& BleCharacteristic::permissions() const {
  return permissions_;
}

void BleCharacteristic::set_permissions(const EncodableList& value_arg) {
  permissions_ = value_arg;
}


const EncodableList* BleCharacteristic::descriptors() const {
  return descriptors_ ? &(*descriptors_) : nullptr;
}

void BleCharacteristic::set_descriptors(const EncodableList* value_arg) {
  descriptors_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void BleCharacteristic::set_descriptors(const EncodableList& value_arg) {
  descriptors_ = value_arg;
}


const std::vector<uint8_t>* BleCharacteristic::value() const {
  return value_ ? &(*value_) : nullptr;
}

void BleCharacteristic::set_value(const std::vector<uint8_t>* value_arg) {
  value_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void BleCharacteristic::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


EncodableList BleCharacteristic::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(uuid_));
  list.push_back(EncodableValue(properties_));
  list.push_back(EncodableValue(permissions_));
  list.push_back(descriptors_ ? EncodableValue(*descriptors_) : EncodableValue());
  list.push_back(value_ ? EncodableValue(*value_) : EncodableValue());
  return list;
}

BleCharacteristic BleCharacteristic::FromEncodableList(const EncodableList& list) {
  BleCharacteristic decoded(
    std::get<std::string>(list[0]),
    std::get<EncodableList>(list[1]),
    std::get<EncodableList>(list[2]));
  auto& encodable_descriptors = list[3];
  if (!encodable_descriptors.IsNull()) {
    decoded.set_descriptors(std::get<EncodableList>(encodable_descriptors));
  }
  auto& encodable_value = list[4];
  if (!encodable_value.IsNull()) {
    decoded.set_value(std::get<std::vector<uint8_t>>(encodable_value));
  }
  return decoded;
}

// BleDescriptor

BleDescriptor::BleDescriptor(const std::string& uuid)
 : uuid_(uuid) {}

BleDescriptor::BleDescriptor(
  const std::string& uuid,
  const std::vector<uint8_t>* value,
  const EncodableList* permissions)
 : uuid_(uuid),
    value_(value ? std::optional<std::vector<uint8_t>>(*value) : std::nullopt),
    permissions_(permissions ? std::optional<EncodableList>(*permissions) : std::nullopt) {}

const std::string& BleDescriptor::uuid() const {
  return uuid_;
}

void BleDescriptor::set_uuid(std::string_view value_arg) {
  uuid_ = value_arg;
}


const std::vector<uint8_t>* BleDescriptor::value() const {
  return value_ ? &(*value_) : nullptr;
}

void BleDescriptor::set_value(const std::vector<uint8_t>* value_arg) {
  value_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void BleDescriptor::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


const EncodableList* BleDescriptor::permissions() const {
  return permissions_ ? &(*permissions_) : nullptr;
}

void BleDescriptor::set_permissions(const EncodableList* value_arg) {
  permissions_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void BleDescriptor::set_permissions(const EncodableList& value_arg) {
  permissions_ = value_arg;
}


EncodableList BleDescriptor::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(uuid_));
  list.push_back(value_ ? EncodableValue(*value_) : EncodableValue());
  list.push_back(permissions_ ? EncodableValue(*permissions_) : EncodableValue());
  return list;
}

BleDescriptor BleDescriptor::FromEncodableList(const EncodableList& list) {
  BleDescriptor decoded(
    std::get<std::string>(list[0]));
  auto& encodable_value = list[1];
  if (!encodable_value.IsNull()) {
    decoded.set_value(std::get<std::vector<uint8_t>>(encodable_value));
  }
  auto& encodable_permissions = list[2];
  if (!encodable_permissions.IsNull()) {
    decoded.set_permissions(std::get<EncodableList>(encodable_permissions));
  }
  return decoded;
}

// ReadRequestResult

ReadRequestResult::ReadRequestResult(const std::vector<uint8_t>& value)
 : value_(value) {}

ReadRequestResult::ReadRequestResult(
  const std::vector<uint8_t>& value,
  const int64_t* offset,
  const int64_t* status)
 : value_(value),
    offset_(offset ? std::optional<int64_t>(*offset) : std::nullopt),
    status_(status ? std::optional<int64_t>(*status) : std::nullopt) {}

const std::vector<uint8_t>& ReadRequestResult::value() const {
  return value_;
}

void ReadRequestResult::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


const int64_t* ReadRequestResult::offset() const {
  return offset_ ? &(*offset_) : nullptr;
}

void ReadRequestResult::set_offset(const int64_t* value_arg) {
  offset_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void ReadRequestResult::set_offset(int64_t value_arg) {
  offset_ = value_arg;
}


const int64_t* ReadRequestResult::status() const {
  return status_ ? &(*status_) : nullptr;
}

void ReadRequestResult::set_status(const int64_t* value_arg) {
  status_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void ReadRequestResult::set_status(int64_t value_arg) {
  status_ = value_arg;
}


EncodableList ReadRequestResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(value_));
  list.push_back(offset_ ? EncodableValue(*offset_) : EncodableValue());
  list.push_back(status_ ? EncodableValue(*status_) : EncodableValue());
  return list;
}

ReadRequestResult ReadRequestResult::FromEncodableList(const EncodableList& list) {
  ReadRequestResult decoded(
    std::get<std::vector<uint8_t>>(list[0]));
  auto& encodable_offset = list[1];
  if (!encodable_offset.IsNull()) {
    decoded.set_offset(std::get<int64_t>(encodable_offset));
  }
  auto& encodable_status = list[2];
  if (!encodable_status.IsNull()) {
    decoded.set_status(std::get<int64_t>(encodable_status));
  }
  return decoded;
}

// WriteRequestResult

WriteRequestResult::WriteRequestResult() {}

WriteRequestResult::WriteRequestResult(
  const std::vector<uint8_t>* value,
  const int64_t* offset,
  const int64_t* status)
 : value_(value ? std::optional<std::vector<uint8_t>>(*value) : std::nullopt),
    offset_(offset ? std::optional<int64_t>(*offset) : std::nullopt),
    status_(status ? std::optional<int64_t>(*status) : std::nullopt) {}

const std::vector<uint8_t>* WriteRequestResult::value() const {
  return value_ ? &(*value_) : nullptr;
}

void WriteRequestResult::set_value(const std::vector<uint8_t>* value_arg) {
  value_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void WriteRequestResult::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


const int64_t* WriteRequestResult::offset() const {
  return offset_ ? &(*offset_) : nullptr;
}

void WriteRequestResult::set_offset(const int64_t* value_arg) {
  offset_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void WriteRequestResult::set_offset(int64_t value_arg) {
  offset_ = value_arg;
}


const int64_t* WriteRequestResult::status() const {
  return status_ ? &(*status_) : nullptr;
}

void WriteRequestResult::set_status(const int64_t* value_arg) {
  status_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void WriteRequestResult::set_status(int64_t value_arg) {
  status_ = value_arg;
}


EncodableList WriteRequestResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(value_ ? EncodableValue(*value_) : EncodableValue());
  list.push_back(offset_ ? EncodableValue(*offset_) : EncodableValue());
  list.push_back(status_ ? EncodableValue(*status_) : EncodableValue());
  return list;
}

WriteRequestResult WriteRequestResult::FromEncodableList(const EncodableList& list) {
  WriteRequestResult decoded;
  auto& encodable_value = list[0];
  if (!encodable_value.IsNull()) {
    decoded.set_value(std::get<std::vector<uint8_t>>(encodable_value));
  }
  auto& encodable_offset = list[1];
  if (!encodable_offset.IsNull()) {
    decoded.set_offset(std::get<int64_t>(encodable_offset));
  }
  auto& encodable_status = list[2];
  if (!encodable_status.IsNull()) {
    decoded.set_status(std::get<int64_t>(encodable_status));
  }
  return decoded;
}

// ManufacturerData

ManufacturerData::ManufacturerData(
  int64_t manufacturer_id,
  const std::vector<uint8_t>& data)
 : manufacturer_id_(manufacturer_id),
    data_(data) {}

int64_t ManufacturerData::manufacturer_id() const {
  return manufacturer_id_;
}

void ManufacturerData::set_manufacturer_id(int64_t value_arg) {
  manufacturer_id_ = value_arg;
}


const std::vector<uint8_t>& ManufacturerData::data() const {
  return data_;
}

void ManufacturerData::set_data(const std::vector<uint8_t>& value_arg) {
  data_ = value_arg;
}


EncodableList ManufacturerData::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(manufacturer_id_));
  list.push_back(EncodableValue(data_));
  return list;
}

ManufacturerData ManufacturerData::FromEncodableList(const EncodableList& list) {
  ManufacturerData decoded(
    std::get<int64_t>(list[0]),
    std::get<std::vector<uint8_t>>(list[1]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<BondState>(enum_arg_value));
      }
    case 130: {
        return CustomEncodableValue(BleService::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 131: {
        return CustomEncodableValue(BleCharacteristic::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(BleDescriptor::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 133: {
        return CustomEncodableValue(ReadRequestResult::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 134: {
        return CustomEncodableValue(WriteRequestResult::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 135: {
        return CustomEncodableValue(ManufacturerData::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(BondState)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<BondState>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(BleService)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<BleService>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleCharacteristic)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<BleCharacteristic>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleDescriptor)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<BleDescriptor>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ReadRequestResult)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<ReadRequestResult>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(WriteRequestResult)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<WriteRequestResult>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManufacturerData)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<ManufacturerData>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by BlePeripheralChannel.
const flutter::StandardMessageCodec& BlePeripheralChannel::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `BlePeripheralChannel` to handle messages through the `binary_messenger`.
void BlePeripheralChannel::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BlePeripheralChannel* api) {
  BlePeripheralChannel::SetUp(binary_messenger, api, "");
}

void BlePeripheralChannel::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BlePeripheralChannel* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.initialize" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->Initialize();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isAdvertising" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<std::optional<bool>> output = api->IsAdvertising();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          auto output_optional = std::move(output).TakeValue();
          if (output_optional) {
            wrapped.push_back(EncodableValue(std::move(output_optional).value()));
          } else {
            wrapped.push_back(EncodableValue());
          }
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isSupported" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<bool> output = api->IsSupported();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.stopAdvertising" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->StopAdvertising();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.askBlePermission" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<bool> output = api->AskBlePermission();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.addService" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_service_arg = args.at(0);
          if (encodable_service_arg.IsNull()) {
            reply(WrapError("service_arg unexpectedly null."));
            return;
          }
          const auto& service_arg = std::any_cast<const BleService&>(std::get<CustomEncodableValue>(encodable_service_arg));
          std::optional<FlutterError> output = api->AddService(service_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.removeService" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_service_id_arg = args.at(0);
          if (encodable_service_id_arg.IsNull()) {
            reply(WrapError("service_id_arg unexpectedly null."));
            return;
          }
          const auto& service_id_arg = std::get<std::string>(encodable_service_id_arg);
          std::optional<FlutterError> output = api->RemoveService(service_id_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.clearServices" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->ClearServices();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.getServices" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<EncodableList> output = api->GetServices();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.startAdvertising" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_services_arg = args.at(0);
          if (encodable_services_arg.IsNull()) {
            reply(WrapError("services_arg unexpectedly null."));
            return;
          }
          const auto& services_arg = std::get<EncodableList>(encodable_services_arg);
          const auto& encodable_local_name_arg = args.at(1);
          const auto* local_name_arg = std::get_if<std::string>(&encodable_local_name_arg);
          const auto& encodable_timeout_arg = args.at(2);
          const auto* timeout_arg = std::get_if<int64_t>(&encodable_timeout_arg);
          const auto& encodable_manufacturer_data_arg = args.at(3);
          const auto* manufacturer_data_arg = encodable_manufacturer_data_arg.IsNull() ? nullptr : &(std::any_cast<const ManufacturerData&>(std::get<CustomEncodableValue>(encodable_manufacturer_data_arg)));
          const auto& encodable_add_manufacturer_data_in_scan_response_arg = args.at(4);
          if (encodable_add_manufacturer_data_in_scan_response_arg.IsNull()) {
            reply(WrapError("add_manufacturer_data_in_scan_response_arg unexpectedly null."));
            return;
          }
          const auto& add_manufacturer_data_in_scan_response_arg = std::get<bool>(encodable_add_manufacturer_data_in_scan_response_arg);
          std::optional<FlutterError> output = api->StartAdvertising(services_arg, local_name_arg, timeout_arg, manufacturer_data_arg, add_manufacturer_data_in_scan_response_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.updateCharacteristic" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_characteristic_id_arg = args.at(0);
          if (encodable_characteristic_id_arg.IsNull()) {
            reply(WrapError("characteristic_id_arg unexpectedly null."));
            return;
          }
          const auto& characteristic_id_arg = std::get<std::string>(encodable_characteristic_id_arg);
          const auto& encodable_value_arg = args.at(1);
          if (encodable_value_arg.IsNull()) {
            reply(WrapError("value_arg unexpectedly null."));
            return;
          }
          const auto& value_arg = std::get<std::vector<uint8_t>>(encodable_value_arg);
          const auto& encodable_device_id_arg = args.at(2);
          const auto* device_id_arg = std::get_if<std::string>(&encodable_device_id_arg);
          std::optional<FlutterError> output = api->UpdateCharacteristic(characteristic_id_arg, value_arg, device_id_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue BlePeripheralChannel::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue BlePeripheralChannel::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
BleCallback::BleCallback(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

BleCallback::BleCallback(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& BleCallback::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

void BleCallback::OnReadRequest(
  const std::string& device_id_arg,
  const std::string& characteristic_id_arg,
  int64_t offset_arg,
  const std::vector<uint8_t>* value_arg,
  std::function<void(const ReadRequestResult*)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(device_id_arg),
    EncodableValue(characteristic_id_arg),
    EncodableValue(offset_arg),
    value_arg ? EncodableValue(*value_arg) : EncodableValue(),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        const auto* return_value = list_return_value->at(0).IsNull() ? nullptr : &(std::any_cast<const ReadRequestResult&>(std::get<CustomEncodableValue>(list_return_value->at(0))));
        on_success(return_value);
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnWriteRequest(
  const std::string& device_id_arg,
  const std::string& characteristic_id_arg,
  int64_t offset_arg,
  const std::vector<uint8_t>* value_arg,
  std::function<void(const WriteRequestResult*)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(device_id_arg),
    EncodableValue(characteristic_id_arg),
    EncodableValue(offset_arg),
    value_arg ? EncodableValue(*value_arg) : EncodableValue(),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        const auto* return_value = list_return_value->at(0).IsNull() ? nullptr : &(std::any_cast<const WriteRequestResult&>(std::get<CustomEncodableValue>(list_return_value->at(0))));
        on_success(return_value);
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnCharacteristicSubscriptionChange(
  const std::string& device_id_arg,
  const std::string& characteristic_id_arg,
  bool is_subscribed_arg,
  const std::string* name_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(device_id_arg),
    EncodableValue(characteristic_id_arg),
    EncodableValue(is_subscribed_arg),
    name_arg ? EncodableValue(*name_arg) : EncodableValue(),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnAdvertisingStatusUpdate(
  bool advertising_arg,
  const std::string* error_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStatusUpdate" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(advertising_arg),
    error_arg ? EncodableValue(*error_arg) : EncodableValue(),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnBleStateChange(
  bool state_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(state_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnServiceAdded(
  const std::string& service_id_arg,
  const std::string* error_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(service_id_arg),
    error_arg ? EncodableValue(*error_arg) : EncodableValue(),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnMtuChange(
  const std::string& device_id_arg,
  int64_t mtu_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onMtuChange" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(device_id_arg),
    EncodableValue(mtu_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnConnectionStateChange(
  const std::string& device_id_arg,
  bool connected_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(device_id_arg),
    EncodableValue(connected_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void BleCallback::OnBondStateChange(
  const std::string& device_id_arg,
  const BondState& bond_state_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(device_id_arg),
    CustomEncodableValue(bond_state_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

}  // namespace ble_peripheral
