// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_BLEPERIPHERAL_G_H_
#define PIGEON_BLEPERIPHERAL_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace ble_peripheral {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class BlePeripheralChannel;
  friend class BleCallback;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Enums
enum class BondState {
  kBonding = 0,
  kBonded = 1,
  kNone = 2
};


// Models
//
// Generated class from Pigeon that represents data sent in messages.
class BleService {
 public:
  // Constructs an object setting all fields.
  explicit BleService(
    const std::string& uuid,
    bool primary,
    const flutter::EncodableList& characteristics);

  const std::string& uuid() const;
  void set_uuid(std::string_view value_arg);

  bool primary() const;
  void set_primary(bool value_arg);

  const flutter::EncodableList& characteristics() const;
  void set_characteristics(const flutter::EncodableList& value_arg);


 private:
  static BleService FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BlePeripheralChannel;
  friend class BleCallback;
  friend class PigeonInternalCodecSerializer;
  std::string uuid_;
  bool primary_;
  flutter::EncodableList characteristics_;

};


// Generated class from Pigeon that represents data sent in messages.
class BleCharacteristic {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit BleCharacteristic(
    const std::string& uuid,
    const flutter::EncodableList& properties,
    const flutter::EncodableList& permissions);

  // Constructs an object setting all fields.
  explicit BleCharacteristic(
    const std::string& uuid,
    const flutter::EncodableList& properties,
    const flutter::EncodableList& permissions,
    const flutter::EncodableList* descriptors,
    const std::vector<uint8_t>* value);

  const std::string& uuid() const;
  void set_uuid(std::string_view value_arg);

  const flutter::EncodableList& properties() const;
  void set_properties(const flutter::EncodableList& value_arg);

  const flutter::EncodableList& permissions() const;
  void set_permissions(const flutter::EncodableList& value_arg);

  const flutter::EncodableList* descriptors() const;
  void set_descriptors(const flutter::EncodableList* value_arg);
  void set_descriptors(const flutter::EncodableList& value_arg);

  const std::vector<uint8_t>* value() const;
  void set_value(const std::vector<uint8_t>* value_arg);
  void set_value(const std::vector<uint8_t>& value_arg);


 private:
  static BleCharacteristic FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BlePeripheralChannel;
  friend class BleCallback;
  friend class PigeonInternalCodecSerializer;
  std::string uuid_;
  flutter::EncodableList properties_;
  flutter::EncodableList permissions_;
  std::optional<flutter::EncodableList> descriptors_;
  std::optional<std::vector<uint8_t>> value_;

};


// Generated class from Pigeon that represents data sent in messages.
class BleDescriptor {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit BleDescriptor(const std::string& uuid);

  // Constructs an object setting all fields.
  explicit BleDescriptor(
    const std::string& uuid,
    const std::vector<uint8_t>* value,
    const flutter::EncodableList* permissions);

  const std::string& uuid() const;
  void set_uuid(std::string_view value_arg);

  const std::vector<uint8_t>* value() const;
  void set_value(const std::vector<uint8_t>* value_arg);
  void set_value(const std::vector<uint8_t>& value_arg);

  const flutter::EncodableList* permissions() const;
  void set_permissions(const flutter::EncodableList* value_arg);
  void set_permissions(const flutter::EncodableList& value_arg);


 private:
  static BleDescriptor FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BlePeripheralChannel;
  friend class BleCallback;
  friend class PigeonInternalCodecSerializer;
  std::string uuid_;
  std::optional<std::vector<uint8_t>> value_;
  std::optional<flutter::EncodableList> permissions_;

};


// Generated class from Pigeon that represents data sent in messages.
class ReadRequestResult {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit ReadRequestResult(const std::vector<uint8_t>& value);

  // Constructs an object setting all fields.
  explicit ReadRequestResult(
    const std::vector<uint8_t>& value,
    const int64_t* offset,
    const int64_t* status);

  const std::vector<uint8_t>& value() const;
  void set_value(const std::vector<uint8_t>& value_arg);

  const int64_t* offset() const;
  void set_offset(const int64_t* value_arg);
  void set_offset(int64_t value_arg);

  const int64_t* status() const;
  void set_status(const int64_t* value_arg);
  void set_status(int64_t value_arg);


 private:
  static ReadRequestResult FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BlePeripheralChannel;
  friend class BleCallback;
  friend class PigeonInternalCodecSerializer;
  std::vector<uint8_t> value_;
  std::optional<int64_t> offset_;
  std::optional<int64_t> status_;

};


// Generated class from Pigeon that represents data sent in messages.
class WriteRequestResult {
 public:
  // Constructs an object setting all non-nullable fields.
  WriteRequestResult();

  // Constructs an object setting all fields.
  explicit WriteRequestResult(
    const std::vector<uint8_t>* value,
    const int64_t* offset,
    const int64_t* status);

  const std::vector<uint8_t>* value() const;
  void set_value(const std::vector<uint8_t>* value_arg);
  void set_value(const std::vector<uint8_t>& value_arg);

  const int64_t* offset() const;
  void set_offset(const int64_t* value_arg);
  void set_offset(int64_t value_arg);

  const int64_t* status() const;
  void set_status(const int64_t* value_arg);
  void set_status(int64_t value_arg);


 private:
  static WriteRequestResult FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BlePeripheralChannel;
  friend class BleCallback;
  friend class PigeonInternalCodecSerializer;
  std::optional<std::vector<uint8_t>> value_;
  std::optional<int64_t> offset_;
  std::optional<int64_t> status_;

};


// Generated class from Pigeon that represents data sent in messages.
class ManufacturerData {
 public:
  // Constructs an object setting all fields.
  explicit ManufacturerData(
    int64_t manufacturer_id,
    const std::vector<uint8_t>& data);

  int64_t manufacturer_id() const;
  void set_manufacturer_id(int64_t value_arg);

  const std::vector<uint8_t>& data() const;
  void set_data(const std::vector<uint8_t>& value_arg);


 private:
  static ManufacturerData FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BlePeripheralChannel;
  friend class BleCallback;
  friend class PigeonInternalCodecSerializer;
  int64_t manufacturer_id_;
  std::vector<uint8_t> data_;

};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Flutter -> Native
//
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class BlePeripheralChannel {
 public:
  BlePeripheralChannel(const BlePeripheralChannel&) = delete;
  BlePeripheralChannel& operator=(const BlePeripheralChannel&) = delete;
  virtual ~BlePeripheralChannel() {}
  virtual std::optional<FlutterError> Initialize() = 0;
  virtual ErrorOr<std::optional<bool>> IsAdvertising() = 0;
  virtual ErrorOr<bool> IsSupported() = 0;
  virtual std::optional<FlutterError> StopAdvertising() = 0;
  virtual ErrorOr<bool> AskBlePermission() = 0;
  virtual std::optional<FlutterError> AddService(const BleService& service) = 0;
  virtual std::optional<FlutterError> RemoveService(const std::string& service_id) = 0;
  virtual std::optional<FlutterError> ClearServices() = 0;
  virtual ErrorOr<flutter::EncodableList> GetServices() = 0;
  virtual std::optional<FlutterError> StartAdvertising(
    const flutter::EncodableList& services,
    const std::string* local_name,
    const int64_t* timeout,
    const ManufacturerData* manufacturer_data,
    bool add_manufacturer_data_in_scan_response) = 0;
  virtual std::optional<FlutterError> UpdateCharacteristic(
    const std::string& characteristic_id,
    const std::vector<uint8_t>& value,
    const std::string* device_id) = 0;

  // The codec used by BlePeripheralChannel.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `BlePeripheralChannel` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    BlePeripheralChannel* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    BlePeripheralChannel* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  BlePeripheralChannel() = default;

};
// Native -> Flutter
//
// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class BleCallback {
 public:
  BleCallback(flutter::BinaryMessenger* binary_messenger);
  BleCallback(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void OnReadRequest(
    const std::string& device_id,
    const std::string& characteristic_id,
    int64_t offset,
    const std::vector<uint8_t>* value,
    std::function<void(const ReadRequestResult*)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnWriteRequest(
    const std::string& device_id,
    const std::string& characteristic_id,
    int64_t offset,
    const std::vector<uint8_t>* value,
    std::function<void(const WriteRequestResult*)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnCharacteristicSubscriptionChange(
    const std::string& device_id,
    const std::string& characteristic_id,
    bool is_subscribed,
    const std::string* name,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnAdvertisingStatusUpdate(
    bool advertising,
    const std::string* error,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnBleStateChange(
    bool state,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnServiceAdded(
    const std::string& service_id,
    const std::string* error,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnMtuChange(
    const std::string& device_id,
    int64_t mtu,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnConnectionStateChange(
    const std::string& device_id,
    bool connected,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void OnBondStateChange(
    const std::string& device_id,
    const BondState& bond_state,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);

 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

}  // namespace ble_peripheral
#endif  // PIGEON_BLEPERIPHERAL_G_H_
